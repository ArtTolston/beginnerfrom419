
variable_PWM_for_engine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000634  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058e  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000254  00000000  00000000  00000d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033e  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000013eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__vector_14>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 00 	call	0xae	; 0xae <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void ADC_init() {
	ADMUX = (1 << REFS0) | (1 << ADLAR);
  6c:	80 e6       	ldi	r24, 0x60	; 96
  6e:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADIE) | (1 << ADATE);
  70:	8f ea       	ldi	r24, 0xAF	; 175
  72:	86 b9       	out	0x06, r24	; 6
  74:	08 95       	ret

00000076 <ADC_Conversion>:
}

void ADC_Conversion(void) {
	ADCSRA |= (1 << ADSC);
  76:	36 9a       	sbi	0x06, 6	; 6
  78:	08 95       	ret

0000007a <PWM_var_init>:
}

void PWM_var_init(void) {
	TCCR1A = (1 << WGM11) | (1 << COM1A1);
  7a:	82 e8       	ldi	r24, 0x82	; 130
  7c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS12);
  7e:	8c e1       	ldi	r24, 0x1C	; 28
  80:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0x00;
  82:	1d bc       	out	0x2d, r1	; 45
  84:	1c bc       	out	0x2c, r1	; 44
  86:	08 95       	ret

00000088 <__vector_14>:
	//TIMSK = (1 << TOIE1);
}

ISR(ADC_vect) {
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
	OCR1A = ADCH >> 1;
  96:	85 b1       	in	r24, 0x05	; 5
  98:	86 95       	lsr	r24
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	9b bd       	out	0x2b, r25	; 43
  9e:	8a bd       	out	0x2a, r24	; 42
}
  a0:	9f 91       	pop	r25
  a2:	8f 91       	pop	r24
  a4:	0f 90       	pop	r0
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	0f 90       	pop	r0
  aa:	1f 90       	pop	r1
  ac:	18 95       	reti

000000ae <main>:

int main(void)
{
	DDRD = 0b00111000;
  ae:	88 e3       	ldi	r24, 0x38	; 56
  b0:	81 bb       	out	0x11, r24	; 17
	PORTD = (1 << PORTD4);
  b2:	80 e1       	ldi	r24, 0x10	; 16
  b4:	82 bb       	out	0x12, r24	; 18
    PWM_var_init();
  b6:	0e 94 3d 00 	call	0x7a	; 0x7a <PWM_var_init>
	ADC_init();
  ba:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
	sei();
  be:	78 94       	sei
	ADC_Conversion();
  c0:	0e 94 3b 00 	call	0x76	; 0x76 <ADC_Conversion>
	ICR1H = 0x00;
  c4:	17 bc       	out	0x27, r1	; 39
	ICR1L = 0xff;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0x00;
  ca:	1b bc       	out	0x2b, r1	; 43
  cc:	1a bc       	out	0x2a, r1	; 42
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x20>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
