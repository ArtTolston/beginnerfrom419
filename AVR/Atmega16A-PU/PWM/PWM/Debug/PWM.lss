
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d2  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  0000089a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b2  00000000  00000000  00000e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001124  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000342  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f2  00000000  00000000  000014aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Port_Ini>:
#include <stdlib.h>
#define F_CPU 8000000UL
#include <util/delay.h>
#include <avr/interrupt.h>
void Port_Ini() {
	DDRD = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xff;
  70:	82 bb       	out	0x12, r24	; 18
  72:	08 95       	ret

00000074 <PWM1_Ini>:
}

void PWM1_Ini() {
	TCCR1A |= (1 << COM1A1)| (1 << WGM10);
  74:	8f b5       	in	r24, 0x2f	; 47
  76:	81 68       	ori	r24, 0x81	; 129
  78:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << CS12);
  7a:	8e b5       	in	r24, 0x2e	; 46
  7c:	8c 60       	ori	r24, 0x0C	; 12
  7e:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0x00;
  80:	1d bc       	out	0x2d, r1	; 45
  82:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 0x00;
  84:	1b bc       	out	0x2b, r1	; 43
  86:	1a bc       	out	0x2a, r1	; 42
  88:	08 95       	ret

0000008a <main>:
}

int main(void)
{
    Port_Ini();
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <Port_Ini>
	PWM1_Ini();
  8e:	0e 94 3a 00 	call	0x74	; 0x74 <PWM1_Ini>
	TCNT1 = 0x00;
	OCR1A = 0x00;
}

int main(void)
{
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	30 e0       	ldi	r19, 0x00	; 0
	PWM1_Ini();
	int i;
    while (1) 
    {
		 for (i=0;i<255;i++)		//ѕлавно повышаем €ркость
		 {OCR1A++; _delay_us(200);}
  96:	8a b5       	in	r24, 0x2a	; 42
  98:	9b b5       	in	r25, 0x2b	; 43
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	9b bd       	out	0x2b, r25	; 43
  9e:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f e8       	ldi	r24, 0x8F	; 143
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x1a>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x20>
  aa:	00 00       	nop
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	31 09       	sbc	r19, r1
    Port_Ini();
	PWM1_Ini();
	int i;
    while (1) 
    {
		 for (i=0;i<255;i++)		//ѕлавно повышаем €ркость
  b0:	91 f7       	brne	.-28     	; 0x96 <main+0xc>
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	30 e0       	ldi	r19, 0x00	; 0
		 {OCR1A++; _delay_us(200);}
		 for (i=0;i<255;i++)		//ѕлавно понижаем €ркость
		 {OCR1A--; _delay_us(200);}
  b6:	8a b5       	in	r24, 0x2a	; 42
  b8:	9b b5       	in	r25, 0x2b	; 43
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	9b bd       	out	0x2b, r25	; 43
  be:	8a bd       	out	0x2a, r24	; 42
  c0:	8f e8       	ldi	r24, 0x8F	; 143
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x3a>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x40>
  ca:	00 00       	nop
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	31 09       	sbc	r19, r1
	int i;
    while (1) 
    {
		 for (i=0;i<255;i++)		//ѕлавно повышаем €ркость
		 {OCR1A++; _delay_us(200);}
		 for (i=0;i<255;i++)		//ѕлавно понижаем €ркость
  d0:	91 f7       	brne	.-28     	; 0xb6 <main+0x2c>
  d2:	df cf       	rjmp	.-66     	; 0x92 <main+0x8>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
