
SPI_or_USI_to_ATmega16A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000074  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000000f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005fa  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000573  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000284  00000000  00000000  00000cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033b  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000066  00000000  00000000  000012db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001341  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>
  26:	07 c0       	rjmp	.+14     	; 0x36 <__bad_interrupt>
  28:	06 c0       	rjmp	.+12     	; 0x36 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61
  32:	16 d0       	rcall	.+44     	; 0x60 <main>
  34:	1d c0       	rjmp	.+58     	; 0x70 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <USI_SPI_init>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
void USI_SPI_init() {
	DDRB |= (1 << PORTB4) | (1 << PORTB6) | (1 << PORTB7);
  38:	87 b3       	in	r24, 0x17	; 23
  3a:	80 6d       	ori	r24, 0xD0	; 208
  3c:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PORTB5);
  3e:	bd 98       	cbi	0x17, 5	; 23
	PORTB &= ~(1 << PORTB4) | (1 << PORTB6) | (1 << PORTB7);
  40:	c4 98       	cbi	0x18, 4	; 24
  42:	08 95       	ret

00000044 <Send_byte>:
}

void Send_byte(unsigned char n) {
	USIDR = n;
  44:	8f b9       	out	0x0f, r24	; 15
	USISR |= (1 << USIOIF);
  46:	76 9a       	sbi	0x0e, 6	; 14
	while(!(USISR & (1 << USIOIF))) {
  48:	76 99       	sbic	0x0e, 6	; 14
  4a:	09 c0       	rjmp	.+18     	; 0x5e <Send_byte+0x1a>
		USICR |=(1 << USIWM0) | (1 << USICLK) | (1 << USICS1) | (1 << USITC);
  4c:	8d b1       	in	r24, 0x0d	; 13
  4e:	8b 61       	ori	r24, 0x1B	; 27
  50:	8d b9       	out	0x0d, r24	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  52:	8a e1       	ldi	r24, 0x1A	; 26
  54:	8a 95       	dec	r24
  56:	f1 f7       	brne	.-4      	; 0x54 <Send_byte+0x10>
  58:	00 c0       	rjmp	.+0      	; 0x5a <Send_byte+0x16>
}

void Send_byte(unsigned char n) {
	USIDR = n;
	USISR |= (1 << USIOIF);
	while(!(USISR & (1 << USIOIF))) {
  5a:	76 9b       	sbis	0x0e, 6	; 14
  5c:	f7 cf       	rjmp	.-18     	; 0x4c <Send_byte+0x8>
  5e:	08 95       	ret

00000060 <main>:
}

int main(void)
{
    unsigned char n = 5;
	USI_SPI_init();
  60:	eb df       	rcall	.-42     	; 0x38 <USI_SPI_init>
	
    while (1) 
    {
		Send_byte(n);
  62:	85 e0       	ldi	r24, 0x05	; 5
  64:	ef df       	rcall	.-34     	; 0x44 <Send_byte>
  66:	85 e8       	ldi	r24, 0x85	; 133
  68:	8a 95       	dec	r24
  6a:	f1 f7       	brne	.-4      	; 0x68 <main+0x8>
  6c:	00 00       	nop
  6e:	f9 cf       	rjmp	.-14     	; 0x62 <main+0x2>

00000070 <_exit>:
  70:	f8 94       	cli

00000072 <__stop_program>:
  72:	ff cf       	rjmp	.-2      	; 0x72 <__stop_program>
