
first_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000088  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000010c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000513  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004aa  00000000  00000000  0000068f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000213  00000000  00000000  00000b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cc  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__vector_4>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>
  26:	07 c0       	rjmp	.+14     	; 0x36 <__bad_interrupt>
  28:	06 c0       	rjmp	.+12     	; 0x36 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61
  32:	22 d0       	rcall	.+68     	; 0x78 <main>
  34:	27 c0       	rjmp	.+78     	; 0x84 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <timer_init>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void timer_init() {
	OCR1AH = 0b01111010;
  38:	8a e7       	ldi	r24, 0x7A	; 122
  3a:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b00010010;
  3c:	82 e1       	ldi	r24, 0x12	; 18
  3e:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << WGM12);
  40:	8e b5       	in	r24, 0x2e	; 46
  42:	88 60       	ori	r24, 0x08	; 8
  44:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
  46:	89 b7       	in	r24, 0x39	; 57
  48:	80 64       	ori	r24, 0x40	; 64
  4a:	89 bf       	out	0x39, r24	; 57
	TCCR1B |= (1 << CS12);
  4c:	8e b5       	in	r24, 0x2e	; 46
  4e:	84 60       	ori	r24, 0x04	; 4
  50:	8e bd       	out	0x2e, r24	; 46
  52:	08 95       	ret

00000054 <__vector_4>:
}

ISR(TIMER1_COMPA_vect) {
  54:	1f 92       	push	r1
  56:	0f 92       	push	r0
  58:	0f b6       	in	r0, 0x3f	; 63
  5a:	0f 92       	push	r0
  5c:	11 24       	eor	r1, r1
  5e:	8f 93       	push	r24
		if(PIND&0b00000001) {
  60:	80 9b       	sbis	0x10, 0	; 16
  62:	02 c0       	rjmp	.+4      	; 0x68 <__vector_4+0x14>
			PORTD = 0x00;
  64:	12 ba       	out	0x12, r1	; 18
  66:	02 c0       	rjmp	.+4      	; 0x6c <__vector_4+0x18>
		} else {
			PORTD = 0x7f;
  68:	8f e7       	ldi	r24, 0x7F	; 127
  6a:	82 bb       	out	0x12, r24	; 18
		}
}
  6c:	8f 91       	pop	r24
  6e:	0f 90       	pop	r0
  70:	0f be       	out	0x3f, r0	; 63
  72:	0f 90       	pop	r0
  74:	1f 90       	pop	r1
  76:	18 95       	reti

00000078 <main>:

int main(void)
{
	timer_init();
  78:	df df       	rcall	.-66     	; 0x38 <timer_init>
	
    DDRD = 0b00000111;
  7a:	87 e0       	ldi	r24, 0x07	; 7
  7c:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000111;
  7e:	82 bb       	out	0x12, r24	; 18
	sei();
  80:	78 94       	sei
  82:	ff cf       	rjmp	.-2      	; 0x82 <main+0xa>

00000084 <_exit>:
  84:	f8 94       	cli

00000086 <__stop_program>:
  86:	ff cf       	rjmp	.-2      	; 0x86 <__stop_program>
