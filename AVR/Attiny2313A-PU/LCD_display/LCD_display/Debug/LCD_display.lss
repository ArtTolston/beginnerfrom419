
LCD_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a79  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f6  00000000  00000000  00000cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000377  00000000  00000000  000012af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001628  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000047f  00000000  00000000  000019f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>
  26:	07 c0       	rjmp	.+14     	; 0x36 <__bad_interrupt>
  28:	06 c0       	rjmp	.+12     	; 0x36 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61
  32:	6b d0       	rcall	.+214    	; 0x10a <main>
  34:	7d c0       	rjmp	.+250    	; 0x130 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <port_ini>:
}

void setpos(unsigned int x, unsigned int y) {
	char address = 0x40 * y + x;
	address |= 0b10000000;
	send_byte(address, 0);
  38:	18 ba       	out	0x18, r1	; 24
  3a:	8f ef       	ldi	r24, 0xFF	; 255
  3c:	87 bb       	out	0x17, r24	; 23
  3e:	08 95       	ret

00000040 <send_low_halfbyte>:
  40:	c3 9a       	sbi	0x18, 3	; 24
  42:	92 e4       	ldi	r25, 0x42	; 66
  44:	9a 95       	dec	r25
  46:	f1 f7       	brne	.-4      	; 0x44 <send_low_halfbyte+0x4>
  48:	00 c0       	rjmp	.+0      	; 0x4a <send_low_halfbyte+0xa>
  4a:	98 b3       	in	r25, 0x18	; 24
  4c:	9f 70       	andi	r25, 0x0F	; 15
  4e:	98 bb       	out	0x18, r25	; 24
  50:	98 b3       	in	r25, 0x18	; 24
  52:	82 95       	swap	r24
  54:	80 7f       	andi	r24, 0xF0	; 240
  56:	89 2b       	or	r24, r25
  58:	88 bb       	out	0x18, r24	; 24
  5a:	c3 98       	cbi	0x18, 3	; 24
  5c:	82 e4       	ldi	r24, 0x42	; 66
  5e:	8a 95       	dec	r24
  60:	f1 f7       	brne	.-4      	; 0x5e <send_low_halfbyte+0x1e>
  62:	00 c0       	rjmp	.+0      	; 0x64 <send_low_halfbyte+0x24>
  64:	08 95       	ret

00000066 <send_byte>:
  66:	cf 93       	push	r28
  68:	c8 2f       	mov	r28, r24
  6a:	67 2b       	or	r22, r23
  6c:	11 f0       	breq	.+4      	; 0x72 <send_byte+0xc>
  6e:	c2 9a       	sbi	0x18, 2	; 24
  70:	01 c0       	rjmp	.+2      	; 0x74 <send_byte+0xe>
  72:	c2 98       	cbi	0x18, 2	; 24
  74:	8c 2f       	mov	r24, r28
  76:	82 95       	swap	r24
  78:	8f 70       	andi	r24, 0x0F	; 15
  7a:	e2 df       	rcall	.-60     	; 0x40 <send_low_halfbyte>
  7c:	8c 2f       	mov	r24, r28
  7e:	e0 df       	rcall	.-64     	; 0x40 <send_low_halfbyte>
  80:	cf 91       	pop	r28
  82:	08 95       	ret

00000084 <LCD_ini>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	87 e9       	ldi	r24, 0x97	; 151
  86:	9a e3       	ldi	r25, 0x3A	; 58
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <LCD_ini+0x4>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <LCD_ini+0xa>
  8e:	00 00       	nop
}

void LCD_ini() {
	_delay_ms(15);
	send_low_halfbyte(0b00000011);
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	d6 df       	rcall	.-84     	; 0x40 <send_low_halfbyte>
  94:	8f e9       	ldi	r24, 0x9F	; 159
  96:	9f e0       	ldi	r25, 0x0F	; 15
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <LCD_ini+0x14>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <LCD_ini+0x1a>
  9e:	00 00       	nop
	_delay_ms(4);
	send_low_halfbyte(0b00000011);
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	ce df       	rcall	.-100    	; 0x40 <send_low_halfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	95 e8       	ldi	r25, 0x85	; 133
  a6:	9a 95       	dec	r25
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_ini+0x22>
  aa:	00 00       	nop
	_delay_us(100);
	send_low_halfbyte(0b00000011);
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	c8 df       	rcall	.-112    	; 0x40 <send_low_halfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	87 ee       	ldi	r24, 0xE7	; 231
  b2:	93 e0       	ldi	r25, 0x03	; 3
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_ini+0x30>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_ini+0x36>
  ba:	00 00       	nop
	_delay_ms(1);
	send_low_halfbyte(0b00000010);
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	c0 df       	rcall	.-128    	; 0x40 <send_low_halfbyte>
  c0:	87 ee       	ldi	r24, 0xE7	; 231
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCD_ini+0x40>
  c8:	00 c0       	rjmp	.+0      	; 0xca <LCD_ini+0x46>
  ca:	00 00       	nop
	_delay_ms(1);
	send_byte(0b00101000, 0);
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	88 e2       	ldi	r24, 0x28	; 40
  d2:	c9 df       	rcall	.-110    	; 0x66 <send_byte>
  d4:	87 ee       	ldi	r24, 0xE7	; 231
  d6:	93 e0       	ldi	r25, 0x03	; 3
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_ini+0x54>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_ini+0x5a>
  de:	00 00       	nop
	_delay_ms(1);
	send_byte(0b00001110, 0); //cursor is turned on
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	8e e0       	ldi	r24, 0x0E	; 14
  e6:	bf df       	rcall	.-130    	; 0x66 <send_byte>
  e8:	87 ee       	ldi	r24, 0xE7	; 231
  ea:	93 e0       	ldi	r25, 0x03	; 3
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <__stack+0xd>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <__stack+0x13>
  f2:	00 00       	nop
	_delay_ms(1);
	send_byte(0b00000110, 0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	b5 df       	rcall	.-150    	; 0x66 <send_byte>
  fc:	87 ee       	ldi	r24, 0xE7	; 231
  fe:	93 e0       	ldi	r25, 0x03	; 3
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <__stack+0x21>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__stack+0x27>
 106:	00 00       	nop
 108:	08 95       	ret

0000010a <main>:
}


int main(void)
{
	port_ini();
 10a:	96 df       	rcall	.-212    	; 0x38 <port_ini>
	LCD_ini();
 10c:	bb df       	rcall	.-138    	; 0x84 <LCD_ini>
}

void setpos(unsigned int x, unsigned int y) {
	char address = 0x40 * y + x;
	address |= 0b10000000;
	send_byte(address, 0);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	88 ec       	ldi	r24, 0xC8	; 200
 114:	a8 df       	rcall	.-176    	; 0x66 <send_byte>
int main(void)
{
	port_ini();
	LCD_ini();
	setpos(8,1);
	send_byte('m', 1);
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	8d e6       	ldi	r24, 0x6D	; 109
 11c:	a4 df       	rcall	.-184    	; 0x66 <send_byte>
}

void setpos(unsigned int x, unsigned int y) {
	char address = 0x40 * y + x;
	address |= 0b10000000;
	send_byte(address, 0);
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	84 e8       	ldi	r24, 0x84	; 132
 124:	a0 df       	rcall	.-192    	; 0x66 <send_byte>
	port_ini();
	LCD_ini();
	setpos(8,1);
	send_byte('m', 1);
	setpos(4,0);
	send_byte('a', 1);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	81 e6       	ldi	r24, 0x61	; 97
 12c:	9c df       	rcall	.-200    	; 0x66 <send_byte>
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x24>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
